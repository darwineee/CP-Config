" Basic Settings
syntax on
set number
set norelativenumber
set mouse=a
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set showcmd
set showmatch
set hlsearch
set incsearch
set ignorecase
set smartcase
set clipboard=unnamed
set noruler
set wildmenu
set laststatus=2
set belloff=all
"set colorcolumn=80
set cursorline

" Theme setting
colorscheme slate

" Performance settings
set timeoutlen=1000
set ttimeoutlen=0
set ttyfast
set lazyredraw

" Compilation and Running (using C++20)
" F7: Just build to check syntax
nnoremap <F7> :w<CR>:!g++ -std=c++20 -Wall -Wextra % -o %:r<CR>

" F8: Build with LOCAL flag and run
nnoremap <F8> :w<CR>:!g++ -std=c++20 -O2 -Wall -DLOCAL % -o %:r && ./%:r<CR>

" Custom mappings for competitive programming
inoremap {{ {<CR>}<Esc>ko
inoremap ,< cout << 
inoremap ,> cin >> 

" Common snippets
inoremap ,pb push_back()<Esc>i
inoremap ,ppb pop_back()<Esc>i
inoremap ,pf push_front()<Esc>i
inoremap ,ppf pop_front()<Esc>i
inoremap ,fr for(int i = 0; i < n; i++) {<CR>}<Esc>O
inoremap ,ll long long
inoremap ,v vector<><Esc>i
inoremap ,s set<><Esc>i
inoremap ,st stack<><Esc>i
inoremap ,q queue<><Esc>i
inoremap ,dq deque<><Esc>i
inoremap ,m map<><Esc>i
inoremap ,hm unordered_map<><Esc>i
inoremap ,hs unordered_set<><Esc>i

" Auto-pairs
inoremap ( ()<Esc>i
inoremap [ []<Esc>i
inoremap { {}<Esc>i
inoremap " ""<Esc>i
inoremap ' ''<Esc>i

" Status line configuration
let g:start_time = localtime()

" Function to format elapsed time
function! GetElapsedTime()
    let elapsed = localtime() - g:start_time
    let hours = elapsed / 3600
    let minutes = (elapsed % 3600) / 60
    let seconds = elapsed % 60
    return printf("%02d:%02d:%02d", hours, minutes, seconds)
endfunction

" Status line with timer
set statusline=\ %f                     " File name
set statusline+=%m                      " Modified flag
set statusline+=%r                      " Readonly flag
set statusline+=%h                      " Help flag
set statusline+=%w                      " Preview flag
set statusline+=\ [%{&ff}]             " File format
set statusline+=\ [%Y]                 " File type
set statusline+=\ [%4l,%3v]            " Line and column
set statusline+=\ [%p%%]               " Percentage through file
set statusline+=\ [%{GetElapsedTime()}] " Timer
set statusline+=\ 

" Timer update
if has('timers')
    function! UpdateTimer(timer)
        redrawstatus
    endfunction
    let timer = timer_start(1000, 'UpdateTimer', {'repeat': -1})
endif

" Reset Timer command
command! ResetTimer let g:start_time = localtime()

" Template system
if has('nvim')
    let s:template_dir = stdpath('config') . '/templates'
    let s:cp_template = s:template_dir . '/cp_template.cpp'
    let s:lc_template = s:template_dir . '/leetcode_template.cpp'
else
    let s:template_dir = $HOME . '/.vim/templates'
    let s:cp_template = s:template_dir . '/cp_template.cpp'
    let s:lc_template = s:template_dir . '/leetcode_template.cpp'
endif

" Create template directory if it doesn't exist
if !isdirectory(s:template_dir)
    call mkdir(s:template_dir, "p")
endif

" Auto-load appropriate template based on filename
augroup templates
    autocmd!
    autocmd BufNewFile *.cpp call LoadTemplate()
augroup END

function! LoadTemplate()
    let filename = expand('%:t')
    if filename =~ 'cp.cpp'
        execute '0r ' . s:cp_template
    elseif filename =~ 'lc.cpp'
        execute '0r ' . s:lc_template
    endif
endfunction
